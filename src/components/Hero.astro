---
const { lang } = Astro.props;

const content = {
  en: {
    title: "Master Watercolor Painting from Scratch",
    subtitle: "A Complete Step-by-Step Guide for Beginners",
    cta: "Get Your Copy Now",
    decorator: "with Iwa Kowalska",
    features: ["30+ Exercises", "Lifetime Access", "Personal Guidance"]
  },
  pl: {
    title: "Opanuj Malowanie Akwarelą od Podstaw",
    subtitle: "Kompletny Przewodnik Krok po Kroku dla Początkujących",
    cta: "Zamów Teraz",
    decorator: "z Iwą Kowalską",
    features: ["30+ Ćwiczeń", "Dożywotni Dostęp", "Osobiste Wskazówki"]
  }
};

const t = content[lang];
---

<section class="relative min-h-[90vh] flex items-center justify-center py-20 overflow-hidden">
  <!-- Interactive background -->
  <div class="absolute inset-0">
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,_var(--tw-gradient-stops))] from-watercolor-cream via-white to-watercolor-rose opacity-50"></div>
    <div id="paint-drops" class="absolute inset-0"></div>
  </div>

  <!-- Content container -->
  <div class="container mx-auto px-4 relative z-10">
    <div class="max-w-4xl mx-auto">
      <!-- Decorator badge -->
      <div data-scroll class="text-center mb-8">
        <span class="inline-block px-6 py-2 rounded-full bg-white/80 backdrop-blur-sm text-watercolor-brown text-sm font-medium shadow-sm
                     border border-watercolor-terra/20 transform hover:scale-105 transition-all duration-300">
          {t.decorator}
        </span>
      </div>

      <!-- Main title with interactive hover effect -->
      <div data-scroll class="text-center perspective-container mb-6">
        <h1 class="text-5xl md:text-7xl font-display font-bold text-watercolor-brown leading-tight">
          {t.title.split(' ').map((word, i) => (
            <span class="inline-block hover:transform hover:translate-z-12 transition-transform duration-300 cursor-default
                       hover:text-watercolor-brown-dark" style={`transition-delay: ${i * 50}ms`}>
              {word}&nbsp;
            </span>
          ))}
        </h1>
      </div>

      <!-- Animated subtitle -->
      <div data-scroll class="text-center mb-12" style="animation-delay: 200ms">
        <p class="text-xl md:text-2xl text-watercolor-brown-light font-light">
          {t.subtitle}
        </p>
      </div>

      <!-- Feature pills -->
      <div data-scroll class="flex justify-center gap-4 mb-12 flex-wrap" style="animation-delay: 300ms">
        {t.features.map((feature, index) => (
          <span class="px-4 py-2 rounded-full bg-gradient-to-r from-watercolor-beige to-watercolor-beige-dark
                     text-watercolor-brown text-sm font-medium transform hover:scale-105 transition-all duration-300
                     shadow-sm hover:shadow-md cursor-default"
                style={`animation-delay: ${400 + index * 100}ms`}>
            {feature}
          </span>
        ))}
      </div>

      <!-- Enhanced CTA button with prominent animation -->
      <div data-scroll class="text-center" style="animation-delay: 400ms">
        <div class="relative inline-block group">
          <command><!-- Enhanced CTA button without arrow -->
<div data-scroll class="text-center" style="animation-delay: 400ms">
  <div class="relative inline-block group">
    <div class="absolute inset-0 bg-gradient-to-r from-watercolor-terra/20 to-watercolor-rose/20 
                blur-xl transform scale-110 opacity-0 group-hover:opacity-100 transition-all duration-500"></div>
    <a href={`/${lang}/order`}
       class="btn-watercolor relative px-8 py-4">
      <span class="relative z-10">{t.cta}</span>
      <div class="absolute inset-0 bg-gradient-to-r from-watercolor-brown-dark to-watercolor-brown opacity-0 group-hover:opacity-100 transition-all duration-300 rounded-full"></div>
    </a>
  </div>
</div></command>
      </div>
    </div>
  </div>
</section>

<script>
// Paint drop animation
const paintDrops = document.getElementById('paint-drops');
const colors = ['#FFE4E6', '#F5E6D3', '#E6C9A8'];

function createPaintDrop() {
  if (!paintDrops) return;
  
  const drop = document.createElement('div');
  const size = Math.random() * 100 + 50;
  const color = colors[Math.floor(Math.random() * colors.length)];
  
  drop.style.cssText = `
    position: absolute;
    width: ${size}px;
    height: ${size}px;
    background: ${color};
    border-radius: 50%;
    filter: blur(40px);
    opacity: 0;
    transform: scale(0);
    left: ${Math.random() * 100}%;
    top: ${Math.random() * 100}%;
    pointer-events: none;
  `;

  paintDrops.appendChild(drop);

  // Animate the drop
  requestAnimationFrame(() => {
    drop.style.transition = 'all 3s ease-out';
    drop.style.opacity = '0.1';
    drop.style.transform = 'scale(1)';
  });

  // Remove the drop after animation
  setTimeout(() => {
    drop.style.opacity = '0';
    setTimeout(() => drop.remove(), 3000);
  }, 2000);
}

// Create paint drops periodically
if (paintDrops) {
  setInterval(createPaintDrop, 2000);
  createPaintDrop(); // Initial drop
}

// Perspective effect on scroll
const perspectiveContainer = document.querySelector('.perspective-container');
if (perspectiveContainer) {
  window.addEventListener('scroll', () => {
    const scroll = window.scrollY;
    const rotation = Math.min(scroll / 10, 5);
    perspectiveContainer.style.transform = `perspective(1000px) rotateX(${rotation}deg)`;
  });
}
</script>

<style>
.perspective-container {
  perspective: 1000px;
  transform-style: preserve-3d;
  transition: transform 0.3s ease-out;
}

.translate-z-12 {
  transform: translateZ(12px);
}

@keyframes float-in {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

[data-scroll] {
  animation: float-in 0.8s ease-out forwards;
}
</style>